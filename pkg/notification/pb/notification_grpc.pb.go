// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notificationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	RegisterToken(ctx context.Context, in *RegisterTokenRequest, opts ...grpc.CallOption) (*RegisterTokenResponse, error)
	RemoveToken(ctx context.Context, in *RemoveTokenRequest, opts ...grpc.CallOption) (*RemoveTokenResponse, error)
	RemoveUserTokens(ctx context.Context, in *RemoveUserTokensRequest, opts ...grpc.CallOption) (*RemoveUserTokensResponse, error)
	GetUserTokens(ctx context.Context, in *GetUserTokensRequest, opts ...grpc.CallOption) (*GetUserTokensResponse, error)
	GetAllTokens(ctx context.Context, in *GetAllTokensRequest, opts ...grpc.CallOption) (*GetAllTokensResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) RegisterToken(ctx context.Context, in *RegisterTokenRequest, opts ...grpc.CallOption) (*RegisterTokenResponse, error) {
	out := new(RegisterTokenResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/RegisterToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RemoveToken(ctx context.Context, in *RemoveTokenRequest, opts ...grpc.CallOption) (*RemoveTokenResponse, error) {
	out := new(RemoveTokenResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RemoveUserTokens(ctx context.Context, in *RemoveUserTokensRequest, opts ...grpc.CallOption) (*RemoveUserTokensResponse, error) {
	out := new(RemoveUserTokensResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/RemoveUserTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetUserTokens(ctx context.Context, in *GetUserTokensRequest, opts ...grpc.CallOption) (*GetUserTokensResponse, error) {
	out := new(GetUserTokensResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetUserTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetAllTokens(ctx context.Context, in *GetAllTokensRequest, opts ...grpc.CallOption) (*GetAllTokensResponse, error) {
	out := new(GetAllTokensResponse)
	err := c.cc.Invoke(ctx, "/notification.NotificationService/GetAllTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations should embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	RegisterToken(context.Context, *RegisterTokenRequest) (*RegisterTokenResponse, error)
	RemoveToken(context.Context, *RemoveTokenRequest) (*RemoveTokenResponse, error)
	RemoveUserTokens(context.Context, *RemoveUserTokensRequest) (*RemoveUserTokensResponse, error)
	GetUserTokens(context.Context, *GetUserTokensRequest) (*GetUserTokensResponse, error)
	GetAllTokens(context.Context, *GetAllTokensRequest) (*GetAllTokensResponse, error)
}

// UnimplementedNotificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) RegisterToken(context.Context, *RegisterTokenRequest) (*RegisterTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterToken not implemented")
}
func (UnimplementedNotificationServiceServer) RemoveToken(context.Context, *RemoveTokenRequest) (*RemoveTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (UnimplementedNotificationServiceServer) RemoveUserTokens(context.Context, *RemoveUserTokensRequest) (*RemoveUserTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserTokens not implemented")
}
func (UnimplementedNotificationServiceServer) GetUserTokens(context.Context, *GetUserTokensRequest) (*GetUserTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTokens not implemented")
}
func (UnimplementedNotificationServiceServer) GetAllTokens(context.Context, *GetAllTokensRequest) (*GetAllTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTokens not implemented")
}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_RegisterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RegisterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/RegisterToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RegisterToken(ctx, req.(*RegisterTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RemoveToken(ctx, req.(*RemoveTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RemoveUserTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RemoveUserTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/RemoveUserTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RemoveUserTokens(ctx, req.(*RemoveUserTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetUserTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetUserTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetUserTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetUserTokens(ctx, req.(*GetUserTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetAllTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetAllTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.NotificationService/GetAllTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetAllTokens(ctx, req.(*GetAllTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterToken",
			Handler:    _NotificationService_RegisterToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _NotificationService_RemoveToken_Handler,
		},
		{
			MethodName: "RemoveUserTokens",
			Handler:    _NotificationService_RemoveUserTokens_Handler,
		},
		{
			MethodName: "GetUserTokens",
			Handler:    _NotificationService_GetUserTokens_Handler,
		},
		{
			MethodName: "GetAllTokens",
			Handler:    _NotificationService_GetAllTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/notification/pb/notification.proto",
}
