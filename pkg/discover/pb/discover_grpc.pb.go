// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package discoverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoverServiceClient is the client API for DiscoverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoverServiceClient interface {
	DiscoverFeed(ctx context.Context, in *DiscoverFeedRequest, opts ...grpc.CallOption) (*DiscoverFeedResponse, error)
	DiscoverFeedWithTags(ctx context.Context, in *DiscoverFeedWithTagsRequest, opts ...grpc.CallOption) (*DiscoverFeedResponse, error)
}

type discoverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoverServiceClient(cc grpc.ClientConnInterface) DiscoverServiceClient {
	return &discoverServiceClient{cc}
}

func (c *discoverServiceClient) DiscoverFeed(ctx context.Context, in *DiscoverFeedRequest, opts ...grpc.CallOption) (*DiscoverFeedResponse, error) {
	out := new(DiscoverFeedResponse)
	err := c.cc.Invoke(ctx, "/discover.DiscoverService/DiscoverFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoverServiceClient) DiscoverFeedWithTags(ctx context.Context, in *DiscoverFeedWithTagsRequest, opts ...grpc.CallOption) (*DiscoverFeedResponse, error) {
	out := new(DiscoverFeedResponse)
	err := c.cc.Invoke(ctx, "/discover.DiscoverService/DiscoverFeedWithTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoverServiceServer is the server API for DiscoverService service.
// All implementations should embed UnimplementedDiscoverServiceServer
// for forward compatibility
type DiscoverServiceServer interface {
	DiscoverFeed(context.Context, *DiscoverFeedRequest) (*DiscoverFeedResponse, error)
	DiscoverFeedWithTags(context.Context, *DiscoverFeedWithTagsRequest) (*DiscoverFeedResponse, error)
}

// UnimplementedDiscoverServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDiscoverServiceServer struct {
}

func (UnimplementedDiscoverServiceServer) DiscoverFeed(context.Context, *DiscoverFeedRequest) (*DiscoverFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverFeed not implemented")
}
func (UnimplementedDiscoverServiceServer) DiscoverFeedWithTags(context.Context, *DiscoverFeedWithTagsRequest) (*DiscoverFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverFeedWithTags not implemented")
}

// UnsafeDiscoverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoverServiceServer will
// result in compilation errors.
type UnsafeDiscoverServiceServer interface {
	mustEmbedUnimplementedDiscoverServiceServer()
}

func RegisterDiscoverServiceServer(s grpc.ServiceRegistrar, srv DiscoverServiceServer) {
	s.RegisterService(&DiscoverService_ServiceDesc, srv)
}

func _DiscoverService_DiscoverFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServiceServer).DiscoverFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discover.DiscoverService/DiscoverFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServiceServer).DiscoverFeed(ctx, req.(*DiscoverFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoverService_DiscoverFeedWithTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverFeedWithTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServiceServer).DiscoverFeedWithTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discover.DiscoverService/DiscoverFeedWithTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServiceServer).DiscoverFeedWithTags(ctx, req.(*DiscoverFeedWithTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscoverService_ServiceDesc is the grpc.ServiceDesc for DiscoverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discover.DiscoverService",
	HandlerType: (*DiscoverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverFeed",
			Handler:    _DiscoverService_DiscoverFeed_Handler,
		},
		{
			MethodName: "DiscoverFeedWithTags",
			Handler:    _DiscoverService_DiscoverFeedWithTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/discover/pb/discover.proto",
}
